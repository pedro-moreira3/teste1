<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml" xmlns:h="http://java.sun.com/jsf/html" xmlns:p="http://primefaces.org/ui" xmlns:f="http://java.sun.com/jsf/core"
    xmlns:ui="http://java.sun.com/jsf/facelets">

    <div class="Container100 Responsive100 NoIndent">
        <div class="Container100 ui-fluid NoPadding">
            <div class="Card">


                <script type="text/javascript">
                  	//<![CDATA[
					// Client ID and API key from the Developer Console
					var CLIENT_ID = '474160865083-jno2klhddo299od2c1fr5p08vb7v0kn6.apps.googleusercontent.com';
					var API_KEY = 'AIzaSyA43Shh0Bu2vyqSkB7o4vyqzANZgdVe2TA';

					// Array of API discovery doc URLs for APIs used by the quickstart
					var DISCOVERY_DOCS = [ "https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest" ];

					// Authorization scopes required by the API; multiple scopes can be
					// included, separated by spaces.
					var SCOPES = "https://www.googleapis.com/auth/calendar";
					 
					
					/**
					 *  On load, called to load the auth2 library and API client library.
					 */
					function handleClientLoad() {
						try{
							gapi.load('client:auth2', initClient);
						}catch(motivo){
							console.log(motivo);
						}
					}

					/**
					 *  Initializes the API client library and sets up sign-in state
					 *  listeners.
					 */
					function initClient() {
						console.log('Init Client');
						gapi.client.init({
							apiKey : API_KEY,
							clientId : CLIENT_ID,
							discoveryDocs : DISCOVERY_DOCS,
							scope : SCOPES
						}).then(function() {
							gapi.auth2.getAuthInstance().signIn().then(function() {}).catch(function (motivo){
								if(motivo.error = 'popup_blocked_by_browser'){
									alert('Favor desbloquear os popup para realizar a autenticação no google! Após feito isso entrar novamente no sistema!');	
								}								
							});
						}).catch(function (motivo){
							console.log(motivo);
						});
					}

					/**
					 *  Sign out the user upon button click.
					 */
					function handleSignoutClick(event) {
						gapi.auth2.getAuthInstance().signOut();
					}

					/**
					 * Append a pre element to the body containing the given message
					 * as its text node. Used to display the results of the API call.
					 *
					 * @param {string} message Text to be placed in pre element.
					 */
					function appendPre(message) {
						//var pre = document.getElementById('content');
						//var textContent = document.createTextNode(message + '\n');
						//pre.appendChild(textContent);
						if(document.getElementById('lume:log').value.trim() != '') {
							document.getElementById('lume:log').value = document.getElementById('lume:log').value + '\n' + message;
						}else{
							document.getElementById('lume:log').value = message;
						}
						
					}

					/**
					 * Print the summary and start datetime/date of the next ten events in
					 * the authorized user's calendar. If no events are found an
					 * appropriate message is printed.
					 */
					function listUpcomingEvents() {
						gapi.client.calendar.events.list({
							'calendarId' : 'primary',
							'timeMin' : (new Date()).toISOString(),
							'showDeleted' : false,
							'singleEvents' : true,
							'maxResults' : 10,
							'orderBy' : 'startTime'
						}).then(function(response) {
							var events = response.result.items;
							appendPre('Upcoming events:');

							if (events.length > 0) {
								for (i = 0; i < events.length; i++) {
									var event = events[i];
									var when = event.start.dateTime;
									if (!when) {
										when = event.start.date;
									}
									appendPre(event.summary + ' (' + when + ')')
								}
							} else {
								appendPre('No upcoming events found.');
							}
						});											
					}
										
					$.myglobals = {
							agendamentos : []
					};
					
					
					
					function handleComplete(xhr, status, args) {
    					if (args.valido == true) {
    
    						if (args.validationFailed) {
    							alert("Validation Failed");
    						} else {
 
    							$.myglobals.agendamentos = JSON.parse(args.agendamentos);
    							
    							console.log($.myglobals.agendamentos.length);

    							for (var x = 0; x < $.myglobals.agendamentos.length; x++) {
    							//for (var x = 0; x < 3; x++) {
    								
    								var a = $.myglobals.agendamentos[x];
									console.debug("Dormindo 2!");
								
									
									console.log(a.descricaoAgenda + ' ' + a.inicioStrAgenda + ' ' +  a.fimStrAgenda);

    								var event = {
									  'summary': a.descricaoAgenda,
									  'location': a.enderecoCompleto,
									  'description': a.descricaoInternaAgenda,
									  'start': {
									    'dateTime': a.inicioStrAgenda,
									    'timeZone': 'America/Sao_Paulo'
									  },
									  'end': {
									    'dateTime': a.fimStrAgenda,
									    'timeZone': 'America/Sao_Paulo'
									  },
									  'id': a.id
									};
			    
									var request = gapi.client.calendar.events.insert({
									  'calendarId': 'primary',
									  'resource': event
									});
									
									request.execute(function(event) {
										//if(event.htmlLink) {
											console.debug(event)
											if(event.message){												
												if(event.code == 409){
													appendPre('[ERRO] : Este agendamento já foi exportado.');
												}else{
									  				appendPre('[ERRO] Log do Google API : ' + event.message );
												}
											}
											if(event.status){
									  			appendPre('[SUCESSO] Log do Google API : ' + event.status + ' - ['+event.id+'] ' + event.summary );
											}
										//}
									});
									
    							}
    						}
    					}
					}
				// ]]>
				</script>

                <script src="https://apis.google.com/js/api.js">				
				</script>

                <p:remoteCommand name="exportarAgenda" actionListener="#{exportarAgendaMB.carregarAgendamentos}" process="@this" oncomplete="handleComplete(xhr, status, args)" update="pnExportar" />

                <div class="Card ui-fluid">

                    <p:panel id="pnExportar" styleClass="BordNone">
                        <h1>Exportar Consultas para o Google Agenda</h1>
                        <p:separator styleClass="SeparatorFull" />
                        <p:panelGrid columns="1" layout="grid" styleClass="ui-panelgrid-blank" style="border:0px none; background-color:transparent;">
                        	<h:panelGroup class="md-combo" style="margin-top: 20px !important">
	                            <p:selectOneMenu id="periodo" value="#{exportarAgendaMB.periodo}" required="true">
	                                <f:selectItem itemValue="#{null}" itemLabel="Selecione o período" />
	                                <f:selectItem itemValue="HOJE" itemLabel="Hoje" />
	                                <f:selectItem itemValue="AMANHA" itemLabel="Amanhã" />
	                                <f:selectItem itemValue="ESTA_SEMANA" itemLabel="Esta semana" />
	                                <f:selectItem itemValue="PROXIMA_SEMANA" itemLabel="Semana que vem" />
	                            </p:selectOneMenu>
	                            <p:outputLabel for="periodo" value="Período" />
	                            <p:message for="periodo" styleClass="msg" />
	                        </h:panelGroup>
                            <h:panelGroup class="md-inputfield">
                            	<p:inputTextarea id="log" rows="10" cols="200" readonly="true" />
                            	<p:outputLabel for="log" value="Log" />
                            	<p:message for="log" styleClass="msg" />
                            </h:panelGroup>
                        </p:panelGrid>

                        <p:separator styleClass="SeparatorFull" />

                        <div class="Container25 Responsive100">
                            <p:commandButton icon="White fa fa-calendar White" value="Exportar" oncomplete="exportarAgenda();" styleClass="RedButton" process="@this,periodo" />
                        </div>

                        <br />

                        <div class="Container100 Responsive100">

                            <pre id="content"></pre>
                        </div>
                    </p:panel>
                </div>

            </div>
        </div>
    </div>
</ui:composition>

