<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui" template="/WEB-INF/template.xhtml"
	xmlns:pe="http://primefaces.org/ui/extensions">
	<ui:define name="content">
	
<style>
	.column{
		width:100%;
		margin-right:.5%;
		min-height:150px;
		background:#fff;
		float:left;
	}
	.column .dragbox{
		margin:5px 2px  20px;
		background:#fff;
		position:relative;
		border:1px solid #ddd;
		-moz-border-radius:5px;
		-webkit-border-radius:5px;
	}
	.column .dragbox h2{
		margin:0;
		font-size:12px;
		padding:5px;
		background:#f0f0f0;
		color:#000;
		border-bottom:1px solid #eee;
		font-family:Verdana;
		cursor:move;
	}
	.dragbox-content{
		background:#fff;
		min-height:100px; margin:5px;
		font-family:'Lucida Grande', Verdana; font-size:0.8em; line-height:1.5em;
	}
	.column  .placeholder{
		background: #f0f0f0;
		border:1px dashed #ddd;
	}
	.dragbox h2.collapse{
		/*background:#f0f0f0 url('collapse.png') no-repeat top right;*/
	}
	.dragbox h2 .configure{
		font-size:11px; font-weight:normal;
		margin-right:30px; float:right;
	}
	
</style>
	
	
<div class="ui-g ui-fluid">
	<div class="ui-g-12 ui-lg-12">
		<div class="card card-w-title">
			<h1>Configuração de Anamnese
				<h:outputLabel class="fa fa-question" id="tooltipTitulo" style="font-size:24px; margin-left:10px;"/> 
				<p:tooltip for="tooltipTitulo" value="#{tarifaMB.getTooltipValue('configuracaoAnamnese', 'titulo')}" position="bottom" />
			</h1>
			
			<p:separator styleClass="SeparatorFull" />					
			
			<p:panel id="pnPrincipal" styleClass="BordNone">		
				
				<p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank ui-fluid form-group">	
					<p:commandButton id="new" icon="White fa fa-file-o" value="Cadastrar nova Anamnese"
					oncomplete="PF('dlgNovaAnamnese').show();" actionListener="#{configuracaoAnamneseMB.novaAnamnese}" 
	                update=":lume:pnovaAnamnese"  process="@this"/>
				</p:panelGrid>	                         
				
				<br />				 
				<p:dataTable filterDelay="1500" reflow="true" emptyMessage=""
					id="dtConfiguracoes" widgetVar="dtConfiguracoes" value="#{configuracaoAnamneseMB.entityList}" var="configuracao"
					rows="10" paginator="true"
					selectionMode="single" rowKey="#{configuracao}"
					paginatorPosition="bottom" >						
					<f:facet name="header">Anamneses</f:facet>
					<p:column headerText="Ações" width="200" exportable="false" >
					
						<p:commandButton icon="fa fa-plus" process="@this"
								actionListener="#{configuracaoAnamneseMB.abreConfiguracoes(configuracao)}"
								update=""
								oncomplete="PF('dlgConfiguracoes').show();" styleClass="GreenButton"
								title="Configurar perguntas/respostas" />					
						&#160;	
						<p:commandButton icon="fa fa-copy" process="@this"
								actionListener="#{configuracaoAnamneseMB.abreDuplicarAnamnese(configuracao)}"
								update=":lume:pnduplicar"
								oncomplete="PF('dlgDuplicar').show();" styleClass="NavyButton"
								title="Copiar para uma nova anamnese" />										
						&#160;
						<p:commandButton styleClass="OrangeButton" icon="fa fa-pencil"
							title="Editar Nome da Anamnese"										
							update=":lume:pnovaAnamnese"
							actionListener="#{configuracaoAnamneseMB.editarAnamnese(configuracao)}"
							onsuccess="PF('dlgNovaAnamnese').show()" process="@this"
							>
						</p:commandButton>		
						&#160;
						<p:commandButton styleClass="RedButton" icon="fa fa-trash"
							title="Remover Anamnese"										
							update=":lume:pnPrincipal"
							actionListener="#{configuracaoAnamneseMB.removerAnamnese(configuracao)}"
							process="@this"
							>
							<p:confirm header="Confirmação" icon="ui-icon-alert"
								escape="false"
								message="Você tem certeza que remover essa Anamnese?">
							</p:confirm>
						</p:commandButton>
						
												
					</p:column>							
					<p:column filterBy="#{configuracao.descricao}"
						sortBy="#{configuracao.descricao}" filterMatchMode="contains"
						headerText="Nome da Anamnese" filterFunction="#{configuracaoAnamneseMB.filtroSemAcento}">
						<h:outputText value="#{configuracao.descricao}" />
					</p:column>
				</p:dataTable>                           
			</p:panel> 
					
			<ui:remove>
				<p:panelGrid columns="4" layout="grid" styleClass="ui-panelgrid-blank ui-fluid form-group">	
					<p:commandButton id="botaoListaAnamneses" icon="White fa fa-file-o" value="Lista de Anamneses"
						oncomplete="PF('dlgConfiguracoes').show();"
						update="" immediate="true" process="@this"/>
				</p:panelGrid>	
			</ui:remove>
	
		<ui:remove>	
							<p:selectOneMenu id="selectEspecialidades"  converter="configuracaoAnamnese"
									value="#{configuracaoAnamneseMB.entity}">
									<p:ajax
										process="@this,duplicar"
										listener="#{configuracaoAnamneseMB.verificaConfiguracaoAnamnese}"
										update="duplicar"/>
									<f:selectItem itemValue="#{null}" itemLabel="Selecione a Anamnese para configurar as pergutas" />
									<f:selectItems value="#{configuracaoAnamneseMB.entityList}" var="configuracaoAnamnese"
									itemValue="#{configuracaoAnamnese}" itemLabel="#{configuracaoAnamnese.descricao}" />
								</p:selectOneMenu>
						</ui:remove>
				
	<p:dialog widgetVar="dlgConfiguracoes" resizable="false" header="Configuracao da Anamnese" onHide="PF('dlgConfiguracoes').toggleMaximize();" 
	onShow="PF('dlgConfiguracoes').toggleMaximize();" modal="true">
	
			
			
							
							
					
							
				
			
			<!-- From  http://webdeveloperplus.com/jquery/collpasible-drag-drop-panels/
					nesse componente vou adicionar dinamicamente as pergutas
					 -->	
					<div class="column" id="column1">
					</div>	
		
			
			<div class="EmptyBox20"></div>
                   <p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">		
                    <p:commandButton id="previewImpressao" icon="White" value="Preview / Impressão" oncomplete="PF('dlgPreview').show();abrirPreview();" process="" />			
					<p:commandButton  icon="White" value="Fechar" oncomplete="PF('dlgConfiguracoes').hide();" immediate="true" />    
	             </p:panelGrid>
			
		</p:dialog>		
		
		<p:dialog id="dlgNovaAnamnese" widgetVar="dlgNovaAnamnese" header="Nova Anamnese" responsive="true" modal="true" width="50%">
			<p:panel id="pnovaAnamnese" styleClass="BordNone"> 
				
				<p:panelGrid columns="1" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">
					<p:outputLabel for="descricao" value="Descrição: " />
					<p:inputText id="descricao" value="#{configuracaoAnamneseMB.entity.descricao}" maxlength="250" required="true"/>								
				</p:panelGrid>	                           
	            <div class="EmptyBox20"></div>
	             <p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">
					<p:commandButton icon="White fa fa-save" value="Salvar" actionListener="#{configuracaoAnamneseMB.salvarAnamnese}"
	                	update=":lume:pnovaAnamnese,lume:pnPrincipal" process="@this ,:lume:pnovaAnamnese" oncomplete="PF('dlgNovaAnamnese').hide();"
	                    styleClass="GreenButton" />
					<p:commandButton  icon="White" value="Fechar" oncomplete="PF('dlgNovaAnamnese').hide();" immediate="true" />    
	             </p:panelGrid>
			</p:panel>
		</p:dialog>	
		
		
		<p:dialog widgetVar="dlgPreview" resizable="false" onHide="PF('dlgPreview').toggleMaximize();" onShow="PF('dlgPreview').toggleMaximize();" modal="true">
		
		
			<p:panel id="pnpreview" styleClass="BordNone"> 	
				<p:scrollPanel mode="native"
					style="position: relative; width: calc(100% - 20px); height: calc(100% - 20px); padding: 10px;">			
					<div class="column" id="divPreview"></div>                          
		            <div class="EmptyBox20"></div>		             
		        </p:scrollPanel>   
	        	<p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">					
					<p:commandButton  icon="White" value="Fechar" oncomplete="PF('dlgPreview').hide();" immediate="true" />    
	             </p:panelGrid>		            
			</p:panel>
		</p:dialog>	
		
		
		 <ui:remove>
			      	 <p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">	
								
								<h:outputLabel value="Opções de impressão: " />
								<p:selectManyCheckbox
									value="#{configuracaoAnamneseMB.opcoesImpressao}" layout="grid"
									columns="6">
									<f:selectItem itemLabel="Incluir Logo da Empresa na impressão" itemValue="incluirLogo"
										itemEscaped="false" />
									<f:selectItem itemLabel="Incluir cabeçalho" itemValue="S"
										itemEscaped="false" />
									<f:selectItem itemLabel="Incluir rodapé" itemValue="E"
										itemEscaped="false" />
								</p:selectManyCheckbox>
							
					
					
		           	  </p:panelGrid>	
	            	    
		        	<p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">	        	
						<p:commandButton icon="White fa fa-print White" value="Imprimir" actionListener="#{configuracaoAnamneseMB.imprimir}" styleClass="NavyButton" />				
						<p:commandButton  icon="White" value="Fechar" oncomplete="PF('dlgPreview').hide();" immediate="true" />    
		             </p:panelGrid>
	             </ui:remove>		    
		
		
		
		<p:dialog id="dlgDuplicar" widgetVar="dlgDuplicar" header="Copiar Anamnese para uma nova anamnese" responsive="true" modal="true" width="50%">
			<p:panel id="pnduplicar" styleClass="BordNone"> 				
				<p:panelGrid columns="1" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">
					<p:outputLabel for="descricaoNova" value="Descrição da nova Anamnese: " />
					<p:inputText id="descricaoNova" value="#{configuracaoAnamneseMB.descricaoDuplicacao}" maxlength="250" required="true"/>								
				</p:panelGrid>	                          
	            <div class="EmptyBox20"></div>
	             <p:panelGrid columns="2" layout="grid" styleClass="ui-panelgrid-blank form-group ui-fluid">
					<p:commandButton icon="White fa fa-save" value="Salvar" actionListener="#{configuracaoAnamneseMB.duplicarAnamnese}"
	                	update=":lume:pnduplicar,lume:pnPrincipal" process="@this ,:lume:pnduplicar" oncomplete="PF('dlgDuplicar').hide();"
	                    styleClass="GreenButton" />
					<p:commandButton  icon="White" value="Fechar" oncomplete="PF('dlgDuplicar').hide();" immediate="true" />    
	             </p:panelGrid>
			</p:panel>
		</p:dialog>	
		
		
		<h:inputHidden value="" id="valoresBackEnd" />
		
		<p:remoteCommand name="persistePerguntas" actionListener="#{configuracaoAnamneseMB.salvaPerguntas()}" immediate="true"/>			
			
						
		</div>	
	</div>
</div>
		
	
		
		<script>
    //<![CDATA[
    
	    	
		$(function(){
			
		
			
			$('.dragbox')
			.each(function(){
				$(this).hover(function(){
					$(this).find('h2').addClass('collapse');
				}, function(){
					$(this).find('h2').removeClass('collapse');
				})
				.find('h2').hover(function(){
					$(this).find('.configure').css('visibility', 'visible');
				}, function(){
					$(this).find('.configure').css('visibility', 'hidden');
				})
				.click(function(){
					$(this).siblings('.dragbox-content').toggle();
				})
				.end()
				.find('.configure').css('visibility', 'hidden');
			});
			$('.column').sortable({
				connectWith: '.column',
				handle: 'h2',
				cursor: 'move',
				placeholder: 'placeholder',
				forcePlaceholderSize: true,
				opacity: 0.4,
				stop: function(event, ui){
					$(ui.item).find('h2').click();
					var sortorder='';
					$('.column').each(function(){
						var itemorder=$(this).sortable('toArray');
						var columnId=$(this).attr('id');
						sortorder+=columnId+'='+itemorder.toString()+'&';
					});	
					salvarPerguntasBackEnd();
				}
			})
			.disableSelection();
		});
		
		
		function abrirPreview(){
								
			elementoPai = document.getElementById("column1");
			
			document.getElementById("divPreview").innerHTML = "";
			
			if(typeof(elementoPai) != "undefined" && elementoPai != null){
			
				NodeList.prototype.forEach = Array.prototype.forEach
				var childrenPai = elementoPai.childNodes;
				var tipoPergunta;
				i = 1;
				contadorVariasEmVarias = 0;
				//console.log(childrenPai);
				childrenPai.forEach(function(itemPai){    	
					//console.log(itemPai);
					
					NodeList.prototype.forEach = Array.prototype.forEach
			    	var childrenDragBox = itemPai.childNodes;
					childrenDragBox.forEach(function(item){	
					
					    if(item.classList.contains("dragbox-content")){					    	
					    	NodeList.prototype.forEach = Array.prototype.forEach
					    	var childrenDragBoxContent = item.childNodes;			    	
					    	childrenDragBoxContent.forEach(function(item2){			    		
					    		//console.log(item2);
					    	    var tagName = item2.tagName.toLowerCase();
					    	 
					    	    if (tagName === 'select'){
					    	    
					    	    	if(item2.value !== ''){    			    	    		
					    	    		tipoPergunta = item2.value;					    	    	
					    	    	//	console.log(item2.value);
						   				//listaPerguntasRespostas = listaPerguntasRespostas + "@@@" + item2.value;
					    	    	}
					    	
					    	    }else if (tagName === 'textarea'){			    	    	
					    	    	if( typeof(item2.value) == "undefined" || item2.value === null || item2.value === ''){	 
					    	    		
						   		 	}else{						   		 						   		 		
						   				var paragraph = document.createElement( 'p' );
   										var text = document.createTextNode(item2.value);
   										paragraph.appendChild(text);
   										paragraph.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");   
						   		 		
   										document.getElementById("divPreview").appendChild(paragraph);
   										
   										if(tipoPergunta == 'SIM_OU_NAO'){
						    				 var yes_button = makeRadioButton("botaoSimNao" + i, "sim", "Sim");
						    				 var no_button = makeRadioButton("botaoSimNao"+ i, "nao", "Não");
						    				 i++
						    				 document.getElementById("divPreview").appendChild(yes_button);
						    				 document.getElementById("divPreview").appendChild(no_button);						    				
						    	    	}else if(tipoPergunta == 'TEXTO'){
						    	    		var textoPergunta = document.createElement('textarea');
						    	   		 	textoPergunta.setAttribute("style", "margin: 0px; width: 702px; height: 53px;font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
						    	   		 	document.getElementById("divPreview").appendChild(textoPergunta);
						    	    	}//else if(tipoPergunta == 'TEXTO_LIVRE'){
						    	    	//	var textoPergunta = document.createElement('textarea');
						    	   		 //	textoPergunta.setAttribute("style", "margin: 0px; width: 702px; height: 103px;font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
						    	   		 //	document.getElementById("divPreview").appendChild(textoPergunta);
						    	    	//}
   										
						   		 	}
					    	    }else{
					    	    	if(item2.id == 'divRespostas'){				    	    		
					    	    		NodeList.prototype.forEach = Array.prototype.forEach
								    	var children2 = item2.childNodes;
								    	children2.forEach(function(item3){	
								    		NodeList.prototype.forEach = Array.prototype.forEach
									    	var children3 = item3.childNodes;						    		
									    	children3.forEach(function(item4){								    		
									    		var tagName2 = item4.tagName.toLowerCase();
									    		if (tagName2 === 'textarea'){							    			 
									    			//console.log(item4.value);
									    			//console.log(tipoPergunta);
									    			if(tipoPergunta == 'UMA_EM_VARIAS'){
									    				 var button = makeRadioButton(i, item4.value, item4.value);
									    				console.log(i);
									    				 document.getElementById("divPreview").appendChild(button);
									    				
									    	    	}else if(tipoPergunta == 'VARIAS_EM_VARIAS'){
									    	    		
									    	    		 var button = makeCheckboxButton(item4.value+ "" + i, item4.value, item4.value);	
									    	    		 
									    				 document.getElementById("divPreview").appendChild(button);
									    			
									    				 span = document.createElement ("span");
									    				 span.innerHTML += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';									    				 
									    				 document.getElementById("divPreview").appendChild(span);
									    				 
									    				 contadorVariasEmVarias++;
										    	    		if(contadorVariasEmVarias % 6 == 0){
										    	    			 document.getElementById("divPreview").appendChild(document.createElement('br'));
										    	    		}
									    				 
									    	    	}
									    			
									    		 }							    		
									    	});							    	
								    	});
					    	    	}			    	    	
					    	    }
					    	});
					    }
					    i++;
					});
				});
			}			
		
		}
		
		function makeRadioButton(name, value, text) {

		    var label = document.createElement("label");
		    var radio = document.createElement("input");
		    radio.type = "radio";
		    radio.name = name;
		    radio.value = value;
		    label.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
		    label.appendChild(radio);

		    label.appendChild(document.createTextNode(text));
		    return label;
		  }
		
		function makeCheckboxButton(name, value, text) {

		    var label = document.createElement("label");
		    var check = document.createElement("input");
		    check.type = "checkbox";
		    check.name = name;
		    check.value = value;
		    label.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
		    label.appendChild(check);
		    label.appendChild(document.createTextNode(text));
		    return label;
		  }
		
		
	/*	
		if(item2.value == 'SIM_OU_NAO'){
    		
    	}else if(item2.value == 'TEXTO'){
    		
    	}else if(item2.value == 'UMA_EM_VARIAS'){
    		
    	}else if(item2.value == 'VARIAS_EM_VARIAS'){
    		
    	}*/
		
		function saveQuestion(element) {   	
    		  //console.log(saveQuestion); 		
    		return false;
    	}
    	
		
		function populaQuestoes(perguntasJson){			
			limpaFormulario();
			//console.log(perguntasJson);
			for (var pergunta of perguntasJson){
				//console.log(pergunta);
				 adicionaPergunta(pergunta.descricao,pergunta.tipoResposta,pergunta.respostas);
			}			
			 adicionaPergunta(null,null,null);			
		}
		
		
		function adicionaEspecialidadeEmBranco(){
			limpaFormulario();
			var numberOfElements = document.getElementById("column1").childElementCount;
			//console.log(numberOfElements);
			if(numberOfElements != 1){
				adicionaPergunta(null,null,null);
			}
		}
		
		
		
		
    	function adicionaPergunta(pergunta, tipoPergunta, respostas,elementoTextoPergunta){    		
    		
    		//salvarPerguntasBackEnd();
    		
    		//se nao tem texto na pergunta, nao precisa criar outra vazia abaixo.
    		if(typeof(elementoTextoPergunta) != "undefined"){
	    		if( typeof(elementoTextoPergunta.value) == "undefined" || elementoTextoPergunta.value === null || elementoTextoPergunta.value === ''){	   		 		
	    			return;
	   		 	}
    		}
	    		
    		//tudo isso aqui é pra ver se o ultimo elemento esta em branco para 
    		//nao precisar criar um novo elemento                                                                                                                                                                                                                            
    		//. precisa ahcar um jeito melhor pra isso
    		var naoAdicionar = false;
    		elementoPai = document.getElementById("column1").lastChild;
    		if(typeof(elementoPai) != "undefined" && elementoPai != null){
    			NodeList.prototype.forEach = Array.prototype.forEach
    			var children = elementoPai.childNodes;
    			children.forEach(function(item){    			   
    			    if(item.classList.contains("dragbox-content")){
    			    	NodeList.prototype.forEach = Array.prototype.forEach
    			    	var children = item.childNodes;
    			    	children.forEach(function(item2){
    			    	   // console.log(item2);
    			    	    var tagName = item2.tagName.toLowerCase();
    			    	  //  console.log(tagName);
    			    	    if (tagName === 'textarea'){
    			    	    	//console.log(item2.value);
    			    	    	if( typeof(item2.value) == "undefined" || item2.value === null || item2.value === ''){	 
    			    	    		//console.log("bla");
    			    	    		naoAdicionar = true;
    				   		 	}
    			    	    }else if (tagName === 'select'){
    			    	    	if(item2.value === ''){    			    	    		
    			    	    		naoAdicionar = true;
    			    	    	}
    			    	    }
    			    	    
    			    	});
    			    }
    			});
    		}
    		if(naoAdicionar){
    		//	alert('Selecione um tipo para a pergunta e digite o texto da pergunta');
    			return;
    		}
    		
    		
    		var newH2 = document.createElement('h2');
    		newH2.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;font-size: 14px;");
    		newH2.innerHTML = "Pergunta";
    		
    		var newDivInterna = document.createElement('div');
    		newDivInterna.setAttribute("class","dragbox-content");
    	
    		
    		var select = document.createElement( 'select' );
    		option = document.createElement( 'option' );
   		   	option.textContent = 'Selecione o tipo da pergunta';
   		   	option.value = '';    
    		 
   		   option1 = document.createElement( 'option' );
   		   option1.textContent = 'Pergunta com resposta sim ou não';
   		   option1.value = 'SIM_OU_NAO';    	  
   		   
   		   option2 = document.createElement( 'option' );
   		   option2.textContent = 'Pergunta com resposta dissertativa (resposta escrita pelo paciente)';
   		   option2.value = 'TEXTO'; 
   		   
   		   option3 = document.createElement( 'option' );
   		   option3.textContent = 'Pergunta com várias respostas, mas com opção de marcar somente uma resposta';
   		   option3.value = 'UMA_EM_VARIAS'; 
   		   
   		   option4 = document.createElement( 'option' );
   		   option4.textContent = 'Pergunta com várias respostas, com opção de marcar várias respostas';
   		   option4.value = 'VARIAS_EM_VARIAS';
   		   
   		   option5 = document.createElement( 'option' );
   		   option5.textContent = 'Texto Livre (Qualquer texto de anotação, comentário, cabeçalho, etc. Esse tipo não tem resposta)';
   		   option5.value = 'TEXTO_LIVRE';
   		   
   		   select.appendChild( option );
   		   select.appendChild( option1 );
   		   select.appendChild( option2 );
   		   select.appendChild( option3 );
   		   select.appendChild( option4 );
   		   select.appendChild( option5 );
   	
   		   select.classList.add('ui-selectonemenu-label');
		   select.classList.add('ui-inputfield');
   		   select.classList.add('ui-corner-all');
   		   
   		   select.setAttribute("style", "font-family: 'Roboto'','Helvetica Neue'',sans-serif; text-decoration: none;");
   		   
   		
   	   
   		 
   	
   		  var divRespostas = document.createElement('div');
   		   
   		   select.onchange = function(){
			  addNewAnswer(this.value,divRespostas,false);
			  return false;
		   }; 	 
   		   
   			var paragraph = document.createElement( 'p' );
   			var text = document.createTextNode("Digite o texto da pergunta:");
   			paragraph.appendChild(text);
   			paragraph.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
   			
   		 	var textoPergunta = document.createElement('textarea');
   		 	textoPergunta.setAttribute("style", "margin: 0px; width: 702px; height: 53px;font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
   		 	if(typeof(pergunta) != "undefined" && pergunta !== null && pergunta !== ''){
   		 		textoPergunta.value = pergunta;
   		 	}
   	   	
   		 	
    		 var buttonSalvar = document.createElement('button');
    		 buttonSalvar.innerHTML = 'Salvar Pergunta';
    		// buttonSalvar.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
    		// buttonSalvar.classList.add('ui-button');
    		// buttonSalvar.classList.add('ui-widget');
    		// buttonSalvar.classList.add('ui-state-default');
    		// buttonSalvar.classList.add('ui-corner-all');
    		// buttonSalvar.classList.add('ui-button-text-icon-left');
    		// buttonSalvar.classList.add('NavyButton');
    		 
    		 buttonSalvar.onclick = function(){
    			 adicionaPergunta(null,null,null,textoPergunta);
    			 
    			 if(typeof(textoPergunta.value) != "undefined" && textoPergunta.value !== null && textoPergunta.value !== ''){    				
    				 salvarPerguntasBackEnd();
    		 	 }
    		
    			 return false;
    		  }; 
    		  var buttonExcluir = document.createElement('button');
    		  buttonExcluir.innerHTML = 'Excluir Pergunta';
    		  buttonExcluir.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
    		  buttonExcluir.onclick = function(){
    			  removeQuestion(this);
    			  salvarPerguntasBackEnd();
    				return false;
    		  };  
    		  
    		  var divRespostas = document.createElement('div');
    		  divRespostas.setAttribute("id", "divRespostas");
    		  
    			if(typeof(tipoPergunta) != "undefined" && tipoPergunta !== null && tipoPergunta !== ''){
    		 		if(tipoPergunta == 'SIM_OU_NAO'){
    		 			select.value = 'SIM_OU_NAO';
    		 		}else if(tipoPergunta == 'TEXTO'){
    		 			select.value = 'TEXTO';
    		 		}else if(tipoPergunta == 'UMA_EM_VARIAS'){
    		 			select.value = 'UMA_EM_VARIAS';
    		 		}else if(tipoPergunta == 'VARIAS_EM_VARIAS'){
    		 			select.value = 'VARIAS_EM_VARIAS';
    		 		}else if(tipoPergunta == 'TEXTO_LIVRE'){
    		 			select.value = 'TEXTO_LIVRE';
    		 		}
    		 		
    		 		if(typeof(respostas) != "undefined" && respostas !== null && respostas !== ''){
    		 		//	console.log(respostas);
    		 			for (var resposta of respostas){
    		 				//console.log(resposta);
    		 				//console.log(resposta.descricao);
    		 				addNewAnswer(select.value,divRespostas,true,resposta.descricao);
    					}
    		 		}
    		 	}
    		  
    		 newDivInterna.appendChild(select);
    		 newDivInterna.appendChild(paragraph);
    		 newDivInterna.appendChild(textoPergunta);    		 
    		 newDivInterna.appendChild(document.createElement('br'));
    		 newDivInterna.appendChild(document.createElement('br'));
    		 newDivInterna.appendChild(divRespostas);
    		 newDivInterna.appendChild(buttonSalvar);
    		 newDivInterna.appendChild(buttonExcluir);
    		  
    		var newQuestionDiv = document.createElement('div');
    		//newQuestionDiv.setAttribute("id", "item2");
    		newQuestionDiv.setAttribute("class","dragbox");
    		newQuestionDiv.appendChild(newH2);
    		newQuestionDiv.appendChild(newDivInterna);
    		
    	
    		
    		document.getElementById("column1").appendChild(newQuestionDiv);
    		
    	}
    	
    	function addNewAnswer(valorDoSelect, elementoParaInserir, novaResposta, resposta){
    		//console.log(valorDoSelect);
    		if(valorDoSelect === 'UMA_EM_VARIAS' || valorDoSelect === 'VARIAS_EM_VARIAS'){    			
    			if(novaResposta || elementoParaInserir.firstChild == null){  
    			
    				var numberOfElements = elementoParaInserir.childElementCount;;
    				
    				if(numberOfElements == 0){
    					criaNovaPergunta(valorDoSelect, elementoParaInserir, novaResposta, resposta);    
        				//criaNovaPergunta(valorDoSelect, elementoParaInserir, novaResposta, resposta);	
    				}else{
    					criaNovaPergunta(valorDoSelect, elementoParaInserir, novaResposta, resposta);
    				}
    				    
    			}
    			
    		}else{
    			//console.log(elementoParaInserir.firstChild);
    			if(elementoParaInserir.firstChild != null){
    				elementoParaInserir.removeChild(elementoParaInserir.firstChild);	
    			}
    				
    		}
    		
    		
    	}
		
    	function criaNovaPergunta(valorDoSelect, elementoParaInserir, novaResposta, resposta){
    		var divPai = document.createElement('div');
			
			var paragraph = document.createElement( 'p' );
			paragraph.setAttribute("style", "font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
   			var text = document.createTextNode("Digite o texto da resposta:");
   			paragraph.appendChild(text);
    		
    		var textoResposta = document.createElement('textarea');
    		textoResposta.setAttribute("style", "margin: 0px; width: 502px; height: 33px;font-family: 'Roboto','Helvetica Neue',sans-serif; text-decoration: none;");
    		
    		//console.log(resposta);
    		if(typeof(resposta) != "undefined" && resposta !== null && resposta !== ''){
    			//console.log(resposta);
    			textoResposta.value = resposta;
	 		}
    		
    		var buttonNovaResposta = document.createElement('button');
    		buttonNovaResposta.innerHTML = 'Adicionar mais uma resposta';
    		buttonNovaResposta.onclick = function(){
    			addNewAnswer('UMA_EM_VARIAS',elementoParaInserir,true);
    			salvarPerguntasBackEnd();
  				return false;
  		  };  
      		var buttonRemoverResposta = document.createElement('button');
      		buttonRemoverResposta.innerHTML = 'Remover essa resposta';
      		buttonRemoverResposta.onclick = function(){
      			var numberOfElements = this.parentNode.parentNode.childElementCount;
        		//console.log(numberOfElements);
        		if(numberOfElements <= 2){
        			alert("Para esse tipo de pergunta, é necessário pelo menos duas respostas");
        		}else{
        			this.parentNode.parentNode.removeChild(this.parentNode);
        			salvarPerguntasBackEnd();
        		}          			
					return false;
		  		};       		
		
				divPai.appendChild(paragraph);	
				divPai.appendChild(textoResposta);	
				divPai.appendChild(buttonNovaResposta);
				divPai.appendChild(buttonRemoverResposta);
    		elementoParaInserir.appendChild(divPai);
    	}
    	
    	function removeQuestion(element){
    		
    		var numberOfElements = document.getElementById("column1").childElementCount;
    	//	console.log(numberOfElements);
    		if(numberOfElements == 1){
    			alert("A primeira pergunta não pode ser removida");
    		}else{
    			element.parentNode.parentNode.parentNode.removeChild(element.parentNode.parentNode);	
    		}
    		
    	} 
    	
	function limpaFormulario(){
		document.getElementById("column1").innerHTML = '';
	}
	
	function salvarPerguntasBackEnd(){
		
		var listaPerguntasRespostas = "";
		elementoPai = document.getElementById("column1");
		
		if(typeof(elementoPai) != "undefined" && elementoPai != null){
		
			NodeList.prototype.forEach = Array.prototype.forEach
			var childrenPai = elementoPai.childNodes;
			i = 1;
			//console.log(childrenPai);
			childrenPai.forEach(function(itemPai){    	
				//console.log(itemPai);
				
				NodeList.prototype.forEach = Array.prototype.forEach
		    	var childrenDragBox = itemPai.childNodes;
				childrenDragBox.forEach(function(item){	
				
				    if(item.classList.contains("dragbox-content")){
				    	//console.log("a");
				    	NodeList.prototype.forEach = Array.prototype.forEach
				    	var childrenDragBoxContent = item.childNodes;			    	
				    	childrenDragBoxContent.forEach(function(item2){			    		
				    		//console.log(item2);
				    	    var tagName = item2.tagName.toLowerCase();
				    	 
				    	    if (tagName === 'select'){
				    	    
				    	    	if(item2.value === ''){    			    	    		
				    	    		
				    	    	}else{
					   				listaPerguntasRespostas = listaPerguntasRespostas + "@@@" + item2.value;
				    	    	}
				    	  //  console.log(item2);
				    	    }else if (tagName === 'textarea'){			    	    	
				    	    	if( typeof(item2.value) == "undefined" || item2.value === null || item2.value === ''){	 
				    	    		
					   		 	}else{
						   		 	//if( typeof(jsonData[i]) == "undefined" || jsonData[i] === null || jsonData[i] === ''){					   		 		
						   		 	//	jsonData.i = [];
						   		 	//}				   		 		
					   				
					   				listaPerguntasRespostas = listaPerguntasRespostas + "@@@" + item2.value;
					   		 	}
				    	    }else{
				    	    	if(item2.id == 'divRespostas'){				    	    		
				    	    		NodeList.prototype.forEach = Array.prototype.forEach
							    	var children2 = item2.childNodes;
							    	children2.forEach(function(item3){	
							    		NodeList.prototype.forEach = Array.prototype.forEach
								    	var children3 = item3.childNodes;						    		
								    	children3.forEach(function(item4){								    		
								    		var tagName2 = item4.tagName.toLowerCase();
								    		if (tagName2 === 'textarea'){							    			 
								    			//if( typeof(jsonData[i]) == "undefined" || jsonData[i] === null || jsonData[i] === ''){	 
										   		//	jsonData[i] = [];
										   	 	//}
									   			listaPerguntasRespostas = listaPerguntasRespostas + "@@@" + item4.value;
								    		 }							    		
								    	});							    	
							    	});
				    	    	}			    	    	
				    	    }
				    	});
				    }
				    i++;
				});
			});
		}
		
		//enviando para o BE para salvar!
		//if(typeof(listaPerguntasRespostas) != "undefined" && listaPerguntasRespostas !== null && listaPerguntasRespostas !== ''){
		//	console.log(listaPerguntasRespostas);
			document.getElementById('lume:valoresBackEnd').value = listaPerguntasRespostas; 
			persistePerguntas();
 	//	}
	}
    		
    
		
			// ]]>
</script>

		
	</ui:define>
</ui:composition>